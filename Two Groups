/*A. Two Groups
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given an array a consisting of n integers. You want to distribute these n integers into two groups s1 and s2 (groups can be empty) so that the following conditions are satisfied:

For each i (1≤i≤n), ai goes into exactly one group.
The value |sum(s1)|−|sum(s2)| is the maximum possible among all such ways to distribute the integers.
Here sum(s1) denotes the sum of the numbers in the group s1, and sum(s2) denotes the sum of the numbers in the group s2.

Determine the maximum possible value of |sum(s1)|−|sum(s2)|.

Input
The input consists of multiple test cases. The first line contains a single integer t (1≤t≤2⋅104)  — the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1≤n≤105)  — the length of the array a.

The second line of each test case contains n integers a1,a2…an (−109≤ai≤109)  — elements of the array a.

It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.

Output
For each test case, output a single integer  — the maximum possible value of |sum(s1)|−|sum(s2)|.

Example
inputCopy
4
2
10 -10
4
-2 -1 11 0
3
2 3 2
5
-9 2 0 0 -4
outputCopy
0
8
7
11

*/


import java.util.Scanner;
import java.lang.*;


public class Main
{
	public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	int t =sc.nextInt();
	
	while(t-- > 0){
	    long  sum=0;
	    int size=sc.nextInt();
	    long[] arr = new long[size];
	    for( int i =0; i<arr.length ;i++){
	        arr[i]=sc.nextLong();
	         sum = sum+arr[i];
	    }
	    
	    
	    
	    System.out.println(Math.abs(sum));
	}
	}
}
